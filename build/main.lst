ARM GAS  /tmp/ccna5kiV.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB142:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <string.h>
  25:Core/Src/main.c **** #include <stdio.h>
  26:Core/Src/main.c **** #include "MotorRM3508Drive.h"
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccna5kiV.s 			page 2


  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** UART_HandleTypeDef huart1;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE BEGIN PV */
  50:Core/Src/main.c **** /*
  51:Core/Src/main.c **** CAN_TxHeaderTypeDef tx_header_motor;
  52:Core/Src/main.c **** uint8_t tx_data[8] = {0};
  53:Core/Src/main.c **** uint32_t tx_mailbox; 
  54:Core/Src/main.c **** */
  55:Core/Src/main.c **** uint16_t torque=0;
  56:Core/Src/main.c **** /*
  57:Core/Src/main.c **** CAN_RxHeaderTypeDef rx_header_motor[4]={0};
  58:Core/Src/main.c **** uint8_t rx_date[8];
  59:Core/Src/main.c **** struct rx_date_motor_struct{float angle;uint16_t rpm;uint16_t current;uint8_t temperture;} motor_rx
  60:Core/Src/main.c **** CAN_FilterTypeDef sFilterConfig;
  61:Core/Src/main.c **** */
  62:Core/Src/main.c **** /* USER CODE END PV */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  65:Core/Src/main.c **** void SystemClock_Config(void);
  66:Core/Src/main.c **** static void MX_GPIO_Init(void);
  67:Core/Src/main.c **** static void MX_CAN1_Init(void);
  68:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  69:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* USER CODE END PFP */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  74:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  75:Core/Src/main.c **** /*
  76:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
  77:Core/Src/main.c **** {
  78:Core/Src/main.c **** 	uint8_t rx_date[8];
  79:Core/Src/main.c **** 	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&rx_header_motor[0],rx_date)==HAL_OK){
  80:Core/Src/main.c **** 		motor_rx_date.angle = ((rx_date[0]<<8) | rx_date[1])/8191.0f;
  81:Core/Src/main.c **** 		motor_rx_date.current= (rx_date[2]<<8) | rx_date[3];
  82:Core/Src/main.c **** 		motor_rx_date.rpm= (rx_date[4]<<8) | rx_date[5];
  83:Core/Src/main.c **** 		motor_rx_date.temperture= rx_date[6];
  84:Core/Src/main.c **** 		char usart_send[100];
  85:Core/Src/main.c **** 		sprintf(usart_send,"%.2f,%d,%d,%d\n",motor_rx_date.angle,motor_rx_date.rpm,motor_rx_date.current,
  86:Core/Src/main.c **** 		HAL_UART_Transmit(&huart1,(uint8_t*)usart_send,strlen(usart_send),100);
  87:Core/Src/main.c **** 	}
  88:Core/Src/main.c **** }
ARM GAS  /tmp/ccna5kiV.s 			page 3


  89:Core/Src/main.c **** */
  90:Core/Src/main.c **** void motor_rm3508_MSgPendingCallback(struct rx_date_motor_rm3508_struct rx_date,CAN_HandleTypeDef *
  91:Core/Src/main.c **** {
  92:Core/Src/main.c **** 		char usart_send[100];
  93:Core/Src/main.c **** 		sprintf(usart_send,"%.2f,%d,%d,%d\n",rx_date.angle,rx_date.rpm,rx_date.current,rx_date.temperture
  94:Core/Src/main.c **** 		HAL_UART_Transmit(&huart1,(uint8_t*)usart_send,strlen(usart_send),100);
  95:Core/Src/main.c **** }
  96:Core/Src/main.c **** /* USER CODE END 0 */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /**
  99:Core/Src/main.c ****   * @brief  The application entry point.
 100:Core/Src/main.c ****   * @retval int
 101:Core/Src/main.c ****   */
 102:Core/Src/main.c **** int main(void)
 103:Core/Src/main.c **** {
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE END 1 */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 112:Core/Src/main.c ****   HAL_Init();
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE END Init */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* Configure the system clock */
 119:Core/Src/main.c ****   SystemClock_Config();
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* USER CODE END SysInit */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /* Initialize all configured peripherals */
 126:Core/Src/main.c ****   MX_GPIO_Init();
 127:Core/Src/main.c ****   MX_CAN1_Init();
 128:Core/Src/main.c ****   MX_USART1_UART_Init();
 129:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 130:Core/Src/main.c ****   HAL_CAN_Start(&hcan1);
 131:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOH,GPIO_PIN_4,GPIO_PIN_SET);
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   //配置电机帧头信息
 134:Core/Src/main.c ****   // motor_RM3508_tx_header(tx_header_motor);
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   //接受电机数据的帧头信息
 137:Core/Src/main.c ****   //int temp=0;
 138:Core/Src/main.c ****   //while (temp<4) {
 139:Core/Src/main.c ****   // motor_RM3508_each_rx_header(rx_header_motor[temp],temp);
 140:Core/Src/main.c ****   //  temp++;
 141:Core/Src/main.c ****   //}
 142:Core/Src/main.c ****   motor_RM3508_Init(&hcan1,0);
 143:Core/Src/main.c ****   //配置CAN滤波器
 144:Core/Src/main.c ****   //motor_RM3508_sFilterConfig(sFilterConfig);
 145:Core/Src/main.c ****   //启动过滤器
ARM GAS  /tmp/ccna5kiV.s 			page 4


 146:Core/Src/main.c ****   //HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 147:Core/Src/main.c ****   //启动中断
 148:Core/Src/main.c ****   //HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   /* USER CODE END 2 */
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* Infinite loop */
 153:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 154:Core/Src/main.c ****   while (1)
 155:Core/Src/main.c ****   {
 156:Core/Src/main.c **** 	  //使电机正反转
 157:Core/Src/main.c **** 	  while(torque<1000)
 158:Core/Src/main.c **** 	  {
 159:Core/Src/main.c **** 		  torque+=50;
 160:Core/Src/main.c **** 		  moter_rm3508_tx_massage(torque,0,0,0);
 161:Core/Src/main.c **** 		  /*tx_data[0] = torque>>8;
 162:Core/Src/main.c **** 		  tx_data[1] = torque;
 163:Core/Src/main.c ****   		  HAL_CAN_AddTxMessage(&hcan1,&tx_header_motor,tx_data,&tx_mailbox);
 164:Core/Src/main.c **** 		  */
 165:Core/Src/main.c **** 		  HAL_Delay(50);
 166:Core/Src/main.c **** 	  }
 167:Core/Src/main.c **** 	  while(torque>-1000)
 168:Core/Src/main.c **** 	  {
 169:Core/Src/main.c **** 		  torque-=50;
 170:Core/Src/main.c **** 		  moter_rm3508_tx_massage(torque,0,0,0);
 171:Core/Src/main.c **** 		  /*
 172:Core/Src/main.c **** 		  tx_data[0] = torque>>8;
 173:Core/Src/main.c **** 		  tx_data[1] = torque;
 174:Core/Src/main.c ****   		  HAL_CAN_AddTxMessage(&hcan1,&tx_header_motor,tx_data,&tx_mailbox);
 175:Core/Src/main.c **** 		  */
 176:Core/Src/main.c **** 		  HAL_Delay(50);
 177:Core/Src/main.c **** 	  }
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****     /* USER CODE END WHILE */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c ****   /* USER CODE END 3 */
 184:Core/Src/main.c **** }
 185:Core/Src/main.c **** 
 186:Core/Src/main.c **** /**
 187:Core/Src/main.c ****   * @brief System Clock Configuration
 188:Core/Src/main.c ****   * @retval None
 189:Core/Src/main.c ****   */
 190:Core/Src/main.c **** void SystemClock_Config(void)
 191:Core/Src/main.c **** {
 192:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 193:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 196:Core/Src/main.c ****   */
 197:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 198:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 201:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 202:Core/Src/main.c ****   */
ARM GAS  /tmp/ccna5kiV.s 			page 5


 203:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 204:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 6;
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 211:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 212:Core/Src/main.c ****   {
 213:Core/Src/main.c ****     Error_Handler();
 214:Core/Src/main.c ****   }
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 217:Core/Src/main.c ****   */
 218:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 219:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 220:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 221:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 222:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 223:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 226:Core/Src/main.c ****   {
 227:Core/Src/main.c ****     Error_Handler();
 228:Core/Src/main.c ****   }
 229:Core/Src/main.c **** }
 230:Core/Src/main.c **** 
 231:Core/Src/main.c **** /**
 232:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 233:Core/Src/main.c ****   * @param None
 234:Core/Src/main.c ****   * @retval None
 235:Core/Src/main.c ****   */
 236:Core/Src/main.c **** static void MX_CAN1_Init(void)
 237:Core/Src/main.c **** {
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 246:Core/Src/main.c ****   hcan1.Instance = CAN1;
 247:Core/Src/main.c ****   hcan1.Init.Prescaler = 7;
 248:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 249:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 250:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 251:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 252:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 253:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 254:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 255:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 256:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 257:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 258:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 259:Core/Src/main.c ****   {
ARM GAS  /tmp/ccna5kiV.s 			page 6


 260:Core/Src/main.c ****     Error_Handler();
 261:Core/Src/main.c ****   }
 262:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 265:Core/Src/main.c **** 
 266:Core/Src/main.c **** }
 267:Core/Src/main.c **** 
 268:Core/Src/main.c **** /**
 269:Core/Src/main.c ****   * @brief USART1 Initialization Function
 270:Core/Src/main.c ****   * @param None
 271:Core/Src/main.c ****   * @retval None
 272:Core/Src/main.c ****   */
 273:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 274:Core/Src/main.c **** {
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 283:Core/Src/main.c ****   huart1.Instance = USART1;
 284:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 285:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 286:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 287:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 288:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 289:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 290:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 291:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 292:Core/Src/main.c ****   {
 293:Core/Src/main.c ****     Error_Handler();
 294:Core/Src/main.c ****   }
 295:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c **** }
 300:Core/Src/main.c **** 
 301:Core/Src/main.c **** /**
 302:Core/Src/main.c ****   * @brief GPIO Initialization Function
 303:Core/Src/main.c ****   * @param None
 304:Core/Src/main.c ****   * @retval None
 305:Core/Src/main.c ****   */
 306:Core/Src/main.c **** static void MX_GPIO_Init(void)
 307:Core/Src/main.c **** {
  28              		.loc 1 307 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 24
  35              		.cfi_offset 4, -24
  36              		.cfi_offset 5, -20
ARM GAS  /tmp/ccna5kiV.s 			page 7


  37              		.cfi_offset 6, -16
  38              		.cfi_offset 7, -12
  39              		.cfi_offset 8, -8
  40              		.cfi_offset 14, -4
  41 0004 8AB0     		sub	sp, sp, #40
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 64
 308:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  44              		.loc 1 308 3 view .LVU1
  45              		.loc 1 308 20 is_stmt 0 view .LVU2
  46 0006 05AD     		add	r5, sp, #20
  47 0008 0024     		movs	r4, #0
  48 000a 0594     		str	r4, [sp, #20]
  49 000c 0694     		str	r4, [sp, #24]
  50 000e 0794     		str	r4, [sp, #28]
  51 0010 0894     		str	r4, [sp, #32]
  52 0012 0994     		str	r4, [sp, #36]
 309:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 310:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 313:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  53              		.loc 1 313 3 is_stmt 1 view .LVU3
  54              	.LBB4:
  55              		.loc 1 313 3 view .LVU4
  56 0014 0194     		str	r4, [sp, #4]
  57              		.loc 1 313 3 view .LVU5
  58 0016 254B     		ldr	r3, .L3
  59 0018 1A6B     		ldr	r2, [r3, #48]
  60 001a 42F00102 		orr	r2, r2, #1
  61 001e 1A63     		str	r2, [r3, #48]
  62              		.loc 1 313 3 view .LVU6
  63 0020 1A6B     		ldr	r2, [r3, #48]
  64 0022 02F00102 		and	r2, r2, #1
  65 0026 0192     		str	r2, [sp, #4]
  66              		.loc 1 313 3 view .LVU7
  67 0028 019A     		ldr	r2, [sp, #4]
  68              	.LBE4:
  69              		.loc 1 313 3 view .LVU8
 314:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  70              		.loc 1 314 3 view .LVU9
  71              	.LBB5:
  72              		.loc 1 314 3 view .LVU10
  73 002a 0294     		str	r4, [sp, #8]
  74              		.loc 1 314 3 view .LVU11
  75 002c 1A6B     		ldr	r2, [r3, #48]
  76 002e 42F00202 		orr	r2, r2, #2
  77 0032 1A63     		str	r2, [r3, #48]
  78              		.loc 1 314 3 view .LVU12
  79 0034 1A6B     		ldr	r2, [r3, #48]
  80 0036 02F00202 		and	r2, r2, #2
  81 003a 0292     		str	r2, [sp, #8]
  82              		.loc 1 314 3 view .LVU13
  83 003c 029A     		ldr	r2, [sp, #8]
  84              	.LBE5:
  85              		.loc 1 314 3 view .LVU14
 315:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
ARM GAS  /tmp/ccna5kiV.s 			page 8


  86              		.loc 1 315 3 view .LVU15
  87              	.LBB6:
  88              		.loc 1 315 3 view .LVU16
  89 003e 0394     		str	r4, [sp, #12]
  90              		.loc 1 315 3 view .LVU17
  91 0040 1A6B     		ldr	r2, [r3, #48]
  92 0042 42F00802 		orr	r2, r2, #8
  93 0046 1A63     		str	r2, [r3, #48]
  94              		.loc 1 315 3 view .LVU18
  95 0048 1A6B     		ldr	r2, [r3, #48]
  96 004a 02F00802 		and	r2, r2, #8
  97 004e 0392     		str	r2, [sp, #12]
  98              		.loc 1 315 3 view .LVU19
  99 0050 039A     		ldr	r2, [sp, #12]
 100              	.LBE6:
 101              		.loc 1 315 3 view .LVU20
 316:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 102              		.loc 1 316 3 view .LVU21
 103              	.LBB7:
 104              		.loc 1 316 3 view .LVU22
 105 0052 0494     		str	r4, [sp, #16]
 106              		.loc 1 316 3 view .LVU23
 107 0054 1A6B     		ldr	r2, [r3, #48]
 108 0056 42F08002 		orr	r2, r2, #128
 109 005a 1A63     		str	r2, [r3, #48]
 110              		.loc 1 316 3 view .LVU24
 111 005c 1B6B     		ldr	r3, [r3, #48]
 112 005e 03F08003 		and	r3, r3, #128
 113 0062 0493     		str	r3, [sp, #16]
 114              		.loc 1 316 3 view .LVU25
 115 0064 049B     		ldr	r3, [sp, #16]
 116              	.LBE7:
 117              		.loc 1 316 3 view .LVU26
 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 319:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 118              		.loc 1 319 3 view .LVU27
 119 0066 DFF84C80 		ldr	r8, .L3+8
 120 006a 0122     		movs	r2, #1
 121 006c 1021     		movs	r1, #16
 122 006e 4046     		mov	r0, r8
 123 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 124              	.LVL0:
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 322:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 125              		.loc 1 322 3 view .LVU28
 126 0074 0E4F     		ldr	r7, .L3+4
 127 0076 0122     		movs	r2, #1
 128 0078 1146     		mov	r1, r2
 129 007a 3846     		mov	r0, r7
 130 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 131              	.LVL1:
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /*Configure GPIO pin : PA4 */
 325:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_4;
 132              		.loc 1 325 3 view .LVU29
ARM GAS  /tmp/ccna5kiV.s 			page 9


 133              		.loc 1 325 23 is_stmt 0 view .LVU30
 134 0080 1023     		movs	r3, #16
 135 0082 0593     		str	r3, [sp, #20]
 326:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 136              		.loc 1 326 3 is_stmt 1 view .LVU31
 137              		.loc 1 326 24 is_stmt 0 view .LVU32
 138 0084 0126     		movs	r6, #1
 139 0086 0696     		str	r6, [sp, #24]
 327:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 140              		.loc 1 327 3 is_stmt 1 view .LVU33
 141              		.loc 1 327 24 is_stmt 0 view .LVU34
 142 0088 0794     		str	r4, [sp, #28]
 328:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 143              		.loc 1 328 3 is_stmt 1 view .LVU35
 144              		.loc 1 328 25 is_stmt 0 view .LVU36
 145 008a 0894     		str	r4, [sp, #32]
 329:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 146              		.loc 1 329 3 is_stmt 1 view .LVU37
 147 008c 2946     		mov	r1, r5
 148 008e 4046     		mov	r0, r8
 149 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 150              	.LVL2:
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /*Configure GPIO pin : PB0 */
 332:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 151              		.loc 1 332 3 view .LVU38
 152              		.loc 1 332 23 is_stmt 0 view .LVU39
 153 0094 0596     		str	r6, [sp, #20]
 333:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 154              		.loc 1 333 3 is_stmt 1 view .LVU40
 155              		.loc 1 333 24 is_stmt 0 view .LVU41
 156 0096 0696     		str	r6, [sp, #24]
 334:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 157              		.loc 1 334 3 is_stmt 1 view .LVU42
 158              		.loc 1 334 24 is_stmt 0 view .LVU43
 159 0098 0794     		str	r4, [sp, #28]
 335:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 160              		.loc 1 335 3 is_stmt 1 view .LVU44
 161              		.loc 1 335 25 is_stmt 0 view .LVU45
 162 009a 0894     		str	r4, [sp, #32]
 336:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 163              		.loc 1 336 3 is_stmt 1 view .LVU46
 164 009c 2946     		mov	r1, r5
 165 009e 3846     		mov	r0, r7
 166 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
 167              	.LVL3:
 337:Core/Src/main.c **** 
 338:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 339:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 340:Core/Src/main.c **** }
 168              		.loc 1 340 1 is_stmt 0 view .LVU47
 169 00a4 0AB0     		add	sp, sp, #40
 170              	.LCFI2:
 171              		.cfi_def_cfa_offset 24
 172              		@ sp needed
 173 00a6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 174              	.L4:
ARM GAS  /tmp/ccna5kiV.s 			page 10


 175 00aa 00BF     		.align	2
 176              	.L3:
 177 00ac 00380240 		.word	1073887232
 178 00b0 00040240 		.word	1073873920
 179 00b4 00000240 		.word	1073872896
 180              		.cfi_endproc
 181              	.LFE142:
 183              		.section	.rodata.motor_rm3508_MSgPendingCallback.str1.4,"aMS",%progbits,1
 184              		.align	2
 185              	.LC0:
 186 0000 252E3266 		.ascii	"%.2f,%d,%d,%d\012\000"
 186      2C25642C 
 186      25642C25 
 186      640A00
 187              		.section	.text.motor_rm3508_MSgPendingCallback,"ax",%progbits
 188              		.align	1
 189              		.weak	motor_rm3508_MSgPendingCallback
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 194              	motor_rm3508_MSgPendingCallback:
 195              	.LVL4:
 196              	.LFB137:
  91:Core/Src/main.c **** 		char usart_send[100];
 197              		.loc 1 91 1 is_stmt 1 view -0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 120
 200              		@ frame_needed = 0, uses_anonymous_args = 0
  91:Core/Src/main.c **** 		char usart_send[100];
 201              		.loc 1 91 1 is_stmt 0 view .LVU49
 202 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 203              	.LCFI3:
 204              		.cfi_def_cfa_offset 20
 205              		.cfi_offset 4, -20
 206              		.cfi_offset 5, -16
 207              		.cfi_offset 6, -12
 208              		.cfi_offset 7, -8
 209              		.cfi_offset 14, -4
 210 0002 A3B0     		sub	sp, sp, #140
 211              	.LCFI4:
 212              		.cfi_def_cfa_offset 160
 213 0004 05AB     		add	r3, sp, #20
 214              	.LVL5:
  91:Core/Src/main.c **** 		char usart_send[100];
 215              		.loc 1 91 1 view .LVU50
 216 0006 83E80700 		stm	r3, {r0, r1, r2}
  92:Core/Src/main.c **** 		sprintf(usart_send,"%.2f,%d,%d,%d\n",rx_date.angle,rx_date.rpm,rx_date.current,rx_date.temperture
 217              		.loc 1 92 3 is_stmt 1 view .LVU51
  93:Core/Src/main.c **** 		HAL_UART_Transmit(&huart1,(uint8_t*)usart_send,strlen(usart_send),100);
 218              		.loc 1 93 3 view .LVU52
  93:Core/Src/main.c **** 		HAL_UART_Transmit(&huart1,(uint8_t*)usart_send,strlen(usart_send),100);
 219              		.loc 1 93 61 is_stmt 0 view .LVU53
 220 000a BDF81850 		ldrh	r5, [sp, #24]
  93:Core/Src/main.c **** 		HAL_UART_Transmit(&huart1,(uint8_t*)usart_send,strlen(usart_send),100);
 221              		.loc 1 93 73 view .LVU54
 222 000e BDF81A60 		ldrh	r6, [sp, #26]
  93:Core/Src/main.c **** 		HAL_UART_Transmit(&huart1,(uint8_t*)usart_send,strlen(usart_send),100);
ARM GAS  /tmp/ccna5kiV.s 			page 11


 223              		.loc 1 93 89 view .LVU55
 224 0012 9DF81C70 		ldrb	r7, [sp, #28]	@ zero_extendqisi2
  93:Core/Src/main.c **** 		HAL_UART_Transmit(&huart1,(uint8_t*)usart_send,strlen(usart_send),100);
 225              		.loc 1 93 3 view .LVU56
 226 0016 0598     		ldr	r0, [sp, #20]	@ float
 227 0018 FFF7FEFF 		bl	__aeabi_f2d
 228              	.LVL6:
 229 001c 0246     		mov	r2, r0
 230 001e 0B46     		mov	r3, r1
 231 0020 09AC     		add	r4, sp, #36
 232 0022 0297     		str	r7, [sp, #8]
 233 0024 0196     		str	r6, [sp, #4]
 234 0026 0095     		str	r5, [sp]
 235 0028 0749     		ldr	r1, .L7
 236 002a 2046     		mov	r0, r4
 237 002c FFF7FEFF 		bl	sprintf
 238              	.LVL7:
  94:Core/Src/main.c **** }
 239              		.loc 1 94 3 is_stmt 1 view .LVU57
  94:Core/Src/main.c **** }
 240              		.loc 1 94 50 is_stmt 0 view .LVU58
 241 0030 2046     		mov	r0, r4
 242 0032 FFF7FEFF 		bl	strlen
 243              	.LVL8:
  94:Core/Src/main.c **** }
 244              		.loc 1 94 3 discriminator 1 view .LVU59
 245 0036 6423     		movs	r3, #100
 246 0038 82B2     		uxth	r2, r0
 247 003a 2146     		mov	r1, r4
 248 003c 0348     		ldr	r0, .L7+4
 249 003e FFF7FEFF 		bl	HAL_UART_Transmit
 250              	.LVL9:
  95:Core/Src/main.c **** /* USER CODE END 0 */
 251              		.loc 1 95 1 view .LVU60
 252 0042 23B0     		add	sp, sp, #140
 253              	.LCFI5:
 254              		.cfi_def_cfa_offset 20
 255              		@ sp needed
 256 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 257              	.L8:
 258 0046 00BF     		.align	2
 259              	.L7:
 260 0048 00000000 		.word	.LC0
 261 004c 00000000 		.word	huart1
 262              		.cfi_endproc
 263              	.LFE137:
 265              		.section	.text.Error_Handler,"ax",%progbits
 266              		.align	1
 267              		.global	Error_Handler
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 272              	Error_Handler:
 273              	.LFB143:
 341:Core/Src/main.c **** 
 342:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 343:Core/Src/main.c **** 
ARM GAS  /tmp/ccna5kiV.s 			page 12


 344:Core/Src/main.c **** /* USER CODE END 4 */
 345:Core/Src/main.c **** 
 346:Core/Src/main.c **** /**
 347:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 348:Core/Src/main.c ****   * @retval None
 349:Core/Src/main.c ****   */
 350:Core/Src/main.c **** void Error_Handler(void)
 351:Core/Src/main.c **** {
 274              		.loc 1 351 1 is_stmt 1 view -0
 275              		.cfi_startproc
 276              		@ Volatile: function does not return.
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 352:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 353:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 354:Core/Src/main.c ****   __disable_irq();
 280              		.loc 1 354 3 view .LVU62
 281              	.LBB8:
 282              	.LBI8:
 283              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
ARM GAS  /tmp/ccna5kiV.s 			page 13


  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccna5kiV.s 			page 14


  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccna5kiV.s 			page 15


 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
ARM GAS  /tmp/ccna5kiV.s 			page 16


 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccna5kiV.s 			page 17


 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
ARM GAS  /tmp/ccna5kiV.s 			page 18


 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /tmp/ccna5kiV.s 			page 19


 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccna5kiV.s 			page 20


 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccna5kiV.s 			page 21


 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccna5kiV.s 			page 22


 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  /tmp/ccna5kiV.s 			page 23


 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
ARM GAS  /tmp/ccna5kiV.s 			page 24


 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  /tmp/ccna5kiV.s 			page 25


 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
ARM GAS  /tmp/ccna5kiV.s 			page 26


 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccna5kiV.s 			page 27


 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccna5kiV.s 			page 28


 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccna5kiV.s 			page 29


 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 284              		.loc 2 960 27 view .LVU63
 285              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 286              		.loc 2 962 3 view .LVU64
 287              		.syntax unified
 288              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 289 0000 72B6     		cpsid i
 290              	@ 0 "" 2
 291              		.thumb
 292              		.syntax unified
 293              	.L10:
 294              	.LBE9:
 295              	.LBE8:
 355:Core/Src/main.c ****   while (1)
 296              		.loc 1 355 3 view .LVU65
 356:Core/Src/main.c ****   {
 357:Core/Src/main.c ****   }
 297              		.loc 1 357 3 view .LVU66
 355:Core/Src/main.c ****   while (1)
 298              		.loc 1 355 9 view .LVU67
 299 0002 FEE7     		b	.L10
 300              		.cfi_endproc
 301              	.LFE143:
 303              		.section	.text.MX_CAN1_Init,"ax",%progbits
 304              		.align	1
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 309              	MX_CAN1_Init:
 310              	.LFB140:
 237:Core/Src/main.c **** 
 311              		.loc 1 237 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315 0000 08B5     		push	{r3, lr}
 316              	.LCFI6:
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 3, -8
 319              		.cfi_offset 14, -4
 246:Core/Src/main.c ****   hcan1.Init.Prescaler = 7;
 320              		.loc 1 246 3 view .LVU69
 246:Core/Src/main.c ****   hcan1.Init.Prescaler = 7;
 321              		.loc 1 246 18 is_stmt 0 view .LVU70
ARM GAS  /tmp/ccna5kiV.s 			page 30


 322 0002 0D48     		ldr	r0, .L15
 323 0004 0D4B     		ldr	r3, .L15+4
 324 0006 0360     		str	r3, [r0]
 247:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 325              		.loc 1 247 3 is_stmt 1 view .LVU71
 247:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 326              		.loc 1 247 24 is_stmt 0 view .LVU72
 327 0008 0723     		movs	r3, #7
 328 000a 4360     		str	r3, [r0, #4]
 248:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 329              		.loc 1 248 3 is_stmt 1 view .LVU73
 248:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 330              		.loc 1 248 19 is_stmt 0 view .LVU74
 331 000c 0023     		movs	r3, #0
 332 000e 8360     		str	r3, [r0, #8]
 249:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 333              		.loc 1 249 3 is_stmt 1 view .LVU75
 249:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 334              		.loc 1 249 28 is_stmt 0 view .LVU76
 335 0010 C360     		str	r3, [r0, #12]
 250:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 336              		.loc 1 250 3 is_stmt 1 view .LVU77
 250:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 337              		.loc 1 250 23 is_stmt 0 view .LVU78
 338 0012 4FF48032 		mov	r2, #65536
 339 0016 0261     		str	r2, [r0, #16]
 251:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 340              		.loc 1 251 3 is_stmt 1 view .LVU79
 251:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 341              		.loc 1 251 23 is_stmt 0 view .LVU80
 342 0018 4FF40012 		mov	r2, #2097152
 343 001c 4261     		str	r2, [r0, #20]
 252:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 344              		.loc 1 252 3 is_stmt 1 view .LVU81
 252:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 345              		.loc 1 252 32 is_stmt 0 view .LVU82
 346 001e 0376     		strb	r3, [r0, #24]
 253:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 347              		.loc 1 253 3 is_stmt 1 view .LVU83
 253:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 348              		.loc 1 253 25 is_stmt 0 view .LVU84
 349 0020 4376     		strb	r3, [r0, #25]
 254:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 350              		.loc 1 254 3 is_stmt 1 view .LVU85
 254:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 351              		.loc 1 254 25 is_stmt 0 view .LVU86
 352 0022 8376     		strb	r3, [r0, #26]
 255:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 353              		.loc 1 255 3 is_stmt 1 view .LVU87
 255:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 354              		.loc 1 255 33 is_stmt 0 view .LVU88
 355 0024 C376     		strb	r3, [r0, #27]
 256:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 356              		.loc 1 256 3 is_stmt 1 view .LVU89
 256:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 357              		.loc 1 256 32 is_stmt 0 view .LVU90
 358 0026 0377     		strb	r3, [r0, #28]
ARM GAS  /tmp/ccna5kiV.s 			page 31


 257:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 359              		.loc 1 257 3 is_stmt 1 view .LVU91
 257:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 360              		.loc 1 257 35 is_stmt 0 view .LVU92
 361 0028 4377     		strb	r3, [r0, #29]
 258:Core/Src/main.c ****   {
 362              		.loc 1 258 3 is_stmt 1 view .LVU93
 258:Core/Src/main.c ****   {
 363              		.loc 1 258 7 is_stmt 0 view .LVU94
 364 002a FFF7FEFF 		bl	HAL_CAN_Init
 365              	.LVL10:
 258:Core/Src/main.c ****   {
 366              		.loc 1 258 6 discriminator 1 view .LVU95
 367 002e 00B9     		cbnz	r0, .L14
 266:Core/Src/main.c **** 
 368              		.loc 1 266 1 view .LVU96
 369 0030 08BD     		pop	{r3, pc}
 370              	.L14:
 260:Core/Src/main.c ****   }
 371              		.loc 1 260 5 is_stmt 1 view .LVU97
 372 0032 FFF7FEFF 		bl	Error_Handler
 373              	.LVL11:
 374              	.L16:
 375 0036 00BF     		.align	2
 376              	.L15:
 377 0038 00000000 		.word	hcan1
 378 003c 00640040 		.word	1073767424
 379              		.cfi_endproc
 380              	.LFE140:
 382              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 383              		.align	1
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 388              	MX_USART1_UART_Init:
 389              	.LFB141:
 274:Core/Src/main.c **** 
 390              		.loc 1 274 1 view -0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394 0000 08B5     		push	{r3, lr}
 395              	.LCFI7:
 396              		.cfi_def_cfa_offset 8
 397              		.cfi_offset 3, -8
 398              		.cfi_offset 14, -4
 283:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 399              		.loc 1 283 3 view .LVU99
 283:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 400              		.loc 1 283 19 is_stmt 0 view .LVU100
 401 0002 0A48     		ldr	r0, .L21
 402 0004 0A4B     		ldr	r3, .L21+4
 403 0006 0360     		str	r3, [r0]
 284:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 404              		.loc 1 284 3 is_stmt 1 view .LVU101
 284:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 405              		.loc 1 284 24 is_stmt 0 view .LVU102
ARM GAS  /tmp/ccna5kiV.s 			page 32


 406 0008 4FF4E133 		mov	r3, #115200
 407 000c 4360     		str	r3, [r0, #4]
 285:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 408              		.loc 1 285 3 is_stmt 1 view .LVU103
 285:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 409              		.loc 1 285 26 is_stmt 0 view .LVU104
 410 000e 0023     		movs	r3, #0
 411 0010 8360     		str	r3, [r0, #8]
 286:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 412              		.loc 1 286 3 is_stmt 1 view .LVU105
 286:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 413              		.loc 1 286 24 is_stmt 0 view .LVU106
 414 0012 C360     		str	r3, [r0, #12]
 287:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 415              		.loc 1 287 3 is_stmt 1 view .LVU107
 287:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 416              		.loc 1 287 22 is_stmt 0 view .LVU108
 417 0014 0361     		str	r3, [r0, #16]
 288:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 418              		.loc 1 288 3 is_stmt 1 view .LVU109
 288:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 419              		.loc 1 288 20 is_stmt 0 view .LVU110
 420 0016 0C22     		movs	r2, #12
 421 0018 4261     		str	r2, [r0, #20]
 289:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 422              		.loc 1 289 3 is_stmt 1 view .LVU111
 289:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 423              		.loc 1 289 25 is_stmt 0 view .LVU112
 424 001a 8361     		str	r3, [r0, #24]
 290:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 425              		.loc 1 290 3 is_stmt 1 view .LVU113
 290:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 426              		.loc 1 290 28 is_stmt 0 view .LVU114
 427 001c C361     		str	r3, [r0, #28]
 291:Core/Src/main.c ****   {
 428              		.loc 1 291 3 is_stmt 1 view .LVU115
 291:Core/Src/main.c ****   {
 429              		.loc 1 291 7 is_stmt 0 view .LVU116
 430 001e FFF7FEFF 		bl	HAL_UART_Init
 431              	.LVL12:
 291:Core/Src/main.c ****   {
 432              		.loc 1 291 6 discriminator 1 view .LVU117
 433 0022 00B9     		cbnz	r0, .L20
 299:Core/Src/main.c **** 
 434              		.loc 1 299 1 view .LVU118
 435 0024 08BD     		pop	{r3, pc}
 436              	.L20:
 293:Core/Src/main.c ****   }
 437              		.loc 1 293 5 is_stmt 1 view .LVU119
 438 0026 FFF7FEFF 		bl	Error_Handler
 439              	.LVL13:
 440              	.L22:
 441 002a 00BF     		.align	2
 442              	.L21:
 443 002c 00000000 		.word	huart1
 444 0030 00100140 		.word	1073811456
 445              		.cfi_endproc
ARM GAS  /tmp/ccna5kiV.s 			page 33


 446              	.LFE141:
 448              		.section	.text.SystemClock_Config,"ax",%progbits
 449              		.align	1
 450              		.global	SystemClock_Config
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 455              	SystemClock_Config:
 456              	.LFB139:
 191:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 457              		.loc 1 191 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 80
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461 0000 10B5     		push	{r4, lr}
 462              	.LCFI8:
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 4, -8
 465              		.cfi_offset 14, -4
 466 0002 94B0     		sub	sp, sp, #80
 467              	.LCFI9:
 468              		.cfi_def_cfa_offset 88
 192:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 469              		.loc 1 192 3 view .LVU121
 192:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 470              		.loc 1 192 22 is_stmt 0 view .LVU122
 471 0004 08AC     		add	r4, sp, #32
 472 0006 3022     		movs	r2, #48
 473 0008 0021     		movs	r1, #0
 474 000a 2046     		mov	r0, r4
 475 000c FFF7FEFF 		bl	memset
 476              	.LVL14:
 193:Core/Src/main.c **** 
 477              		.loc 1 193 3 is_stmt 1 view .LVU123
 193:Core/Src/main.c **** 
 478              		.loc 1 193 22 is_stmt 0 view .LVU124
 479 0010 0023     		movs	r3, #0
 480 0012 0393     		str	r3, [sp, #12]
 481 0014 0493     		str	r3, [sp, #16]
 482 0016 0593     		str	r3, [sp, #20]
 483 0018 0693     		str	r3, [sp, #24]
 484 001a 0793     		str	r3, [sp, #28]
 197:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 485              		.loc 1 197 3 is_stmt 1 view .LVU125
 486              	.LBB10:
 197:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 487              		.loc 1 197 3 view .LVU126
 488 001c 0193     		str	r3, [sp, #4]
 197:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 489              		.loc 1 197 3 view .LVU127
 490 001e 204A     		ldr	r2, .L29
 491 0020 116C     		ldr	r1, [r2, #64]
 492 0022 41F08051 		orr	r1, r1, #268435456
 493 0026 1164     		str	r1, [r2, #64]
 197:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 494              		.loc 1 197 3 view .LVU128
 495 0028 126C     		ldr	r2, [r2, #64]
ARM GAS  /tmp/ccna5kiV.s 			page 34


 496 002a 02F08052 		and	r2, r2, #268435456
 497 002e 0192     		str	r2, [sp, #4]
 197:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 498              		.loc 1 197 3 view .LVU129
 499 0030 019A     		ldr	r2, [sp, #4]
 500              	.LBE10:
 197:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 501              		.loc 1 197 3 view .LVU130
 198:Core/Src/main.c **** 
 502              		.loc 1 198 3 view .LVU131
 503              	.LBB11:
 198:Core/Src/main.c **** 
 504              		.loc 1 198 3 view .LVU132
 505 0032 0293     		str	r3, [sp, #8]
 198:Core/Src/main.c **** 
 506              		.loc 1 198 3 view .LVU133
 507 0034 1B4B     		ldr	r3, .L29+4
 508 0036 1A68     		ldr	r2, [r3]
 509 0038 42F48042 		orr	r2, r2, #16384
 510 003c 1A60     		str	r2, [r3]
 198:Core/Src/main.c **** 
 511              		.loc 1 198 3 view .LVU134
 512 003e 1B68     		ldr	r3, [r3]
 513 0040 03F48043 		and	r3, r3, #16384
 514 0044 0293     		str	r3, [sp, #8]
 198:Core/Src/main.c **** 
 515              		.loc 1 198 3 view .LVU135
 516 0046 029B     		ldr	r3, [sp, #8]
 517              	.LBE11:
 198:Core/Src/main.c **** 
 518              		.loc 1 198 3 view .LVU136
 203:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 519              		.loc 1 203 3 view .LVU137
 203:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 520              		.loc 1 203 36 is_stmt 0 view .LVU138
 521 0048 0123     		movs	r3, #1
 522 004a 0893     		str	r3, [sp, #32]
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 523              		.loc 1 204 3 is_stmt 1 view .LVU139
 204:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 524              		.loc 1 204 30 is_stmt 0 view .LVU140
 525 004c 4FF48033 		mov	r3, #65536
 526 0050 0993     		str	r3, [sp, #36]
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 527              		.loc 1 205 3 is_stmt 1 view .LVU141
 205:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 528              		.loc 1 205 34 is_stmt 0 view .LVU142
 529 0052 0223     		movs	r3, #2
 530 0054 0E93     		str	r3, [sp, #56]
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 6;
 531              		.loc 1 206 3 is_stmt 1 view .LVU143
 206:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 6;
 532              		.loc 1 206 35 is_stmt 0 view .LVU144
 533 0056 4FF48002 		mov	r2, #4194304
 534 005a 0F92     		str	r2, [sp, #60]
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 535              		.loc 1 207 3 is_stmt 1 view .LVU145
ARM GAS  /tmp/ccna5kiV.s 			page 35


 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 536              		.loc 1 207 30 is_stmt 0 view .LVU146
 537 005c 0622     		movs	r2, #6
 538 005e 1092     		str	r2, [sp, #64]
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 539              		.loc 1 208 3 is_stmt 1 view .LVU147
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 540              		.loc 1 208 30 is_stmt 0 view .LVU148
 541 0060 A822     		movs	r2, #168
 542 0062 1192     		str	r2, [sp, #68]
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 543              		.loc 1 209 3 is_stmt 1 view .LVU149
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 544              		.loc 1 209 30 is_stmt 0 view .LVU150
 545 0064 1293     		str	r3, [sp, #72]
 210:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 546              		.loc 1 210 3 is_stmt 1 view .LVU151
 210:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 547              		.loc 1 210 30 is_stmt 0 view .LVU152
 548 0066 0423     		movs	r3, #4
 549 0068 1393     		str	r3, [sp, #76]
 211:Core/Src/main.c ****   {
 550              		.loc 1 211 3 is_stmt 1 view .LVU153
 211:Core/Src/main.c ****   {
 551              		.loc 1 211 7 is_stmt 0 view .LVU154
 552 006a 2046     		mov	r0, r4
 553 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 554              	.LVL15:
 211:Core/Src/main.c ****   {
 555              		.loc 1 211 6 discriminator 1 view .LVU155
 556 0070 90B9     		cbnz	r0, .L27
 218:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 557              		.loc 1 218 3 is_stmt 1 view .LVU156
 218:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 558              		.loc 1 218 31 is_stmt 0 view .LVU157
 559 0072 0F23     		movs	r3, #15
 560 0074 0393     		str	r3, [sp, #12]
 220:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 561              		.loc 1 220 3 is_stmt 1 view .LVU158
 220:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 562              		.loc 1 220 34 is_stmt 0 view .LVU159
 563 0076 0223     		movs	r3, #2
 564 0078 0493     		str	r3, [sp, #16]
 221:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 565              		.loc 1 221 3 is_stmt 1 view .LVU160
 221:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 566              		.loc 1 221 35 is_stmt 0 view .LVU161
 567 007a 0023     		movs	r3, #0
 568 007c 0593     		str	r3, [sp, #20]
 222:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 569              		.loc 1 222 3 is_stmt 1 view .LVU162
 222:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 570              		.loc 1 222 36 is_stmt 0 view .LVU163
 571 007e 4FF4A053 		mov	r3, #5120
 572 0082 0693     		str	r3, [sp, #24]
 223:Core/Src/main.c **** 
 573              		.loc 1 223 3 is_stmt 1 view .LVU164
ARM GAS  /tmp/ccna5kiV.s 			page 36


 223:Core/Src/main.c **** 
 574              		.loc 1 223 36 is_stmt 0 view .LVU165
 575 0084 4FF48053 		mov	r3, #4096
 576 0088 0793     		str	r3, [sp, #28]
 225:Core/Src/main.c ****   {
 577              		.loc 1 225 3 is_stmt 1 view .LVU166
 225:Core/Src/main.c ****   {
 578              		.loc 1 225 7 is_stmt 0 view .LVU167
 579 008a 0521     		movs	r1, #5
 580 008c 03A8     		add	r0, sp, #12
 581 008e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 582              	.LVL16:
 225:Core/Src/main.c ****   {
 583              		.loc 1 225 6 discriminator 1 view .LVU168
 584 0092 18B9     		cbnz	r0, .L28
 229:Core/Src/main.c **** 
 585              		.loc 1 229 1 view .LVU169
 586 0094 14B0     		add	sp, sp, #80
 587              	.LCFI10:
 588              		.cfi_remember_state
 589              		.cfi_def_cfa_offset 8
 590              		@ sp needed
 591 0096 10BD     		pop	{r4, pc}
 592              	.L27:
 593              	.LCFI11:
 594              		.cfi_restore_state
 213:Core/Src/main.c ****   }
 595              		.loc 1 213 5 is_stmt 1 view .LVU170
 596 0098 FFF7FEFF 		bl	Error_Handler
 597              	.LVL17:
 598              	.L28:
 227:Core/Src/main.c ****   }
 599              		.loc 1 227 5 view .LVU171
 600 009c FFF7FEFF 		bl	Error_Handler
 601              	.LVL18:
 602              	.L30:
 603              		.align	2
 604              	.L29:
 605 00a0 00380240 		.word	1073887232
 606 00a4 00700040 		.word	1073770496
 607              		.cfi_endproc
 608              	.LFE139:
 610              		.section	.text.main,"ax",%progbits
 611              		.align	1
 612              		.global	main
 613              		.syntax unified
 614              		.thumb
 615              		.thumb_func
 617              	main:
 618              	.LFB138:
 103:Core/Src/main.c **** 
 619              		.loc 1 103 1 view -0
 620              		.cfi_startproc
 621              		@ Volatile: function does not return.
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccna5kiV.s 			page 37


 625              	.LCFI12:
 626              		.cfi_def_cfa_offset 8
 627              		.cfi_offset 3, -8
 628              		.cfi_offset 14, -4
 112:Core/Src/main.c **** 
 629              		.loc 1 112 3 view .LVU173
 630 0002 FFF7FEFF 		bl	HAL_Init
 631              	.LVL19:
 119:Core/Src/main.c **** 
 632              		.loc 1 119 3 view .LVU174
 633 0006 FFF7FEFF 		bl	SystemClock_Config
 634              	.LVL20:
 126:Core/Src/main.c ****   MX_CAN1_Init();
 635              		.loc 1 126 3 view .LVU175
 636 000a FFF7FEFF 		bl	MX_GPIO_Init
 637              	.LVL21:
 127:Core/Src/main.c ****   MX_USART1_UART_Init();
 638              		.loc 1 127 3 view .LVU176
 639 000e FFF7FEFF 		bl	MX_CAN1_Init
 640              	.LVL22:
 128:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 641              		.loc 1 128 3 view .LVU177
 642 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 643              	.LVL23:
 130:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOH,GPIO_PIN_4,GPIO_PIN_SET);
 644              		.loc 1 130 3 view .LVU178
 645 0016 164C     		ldr	r4, .L36
 646 0018 2046     		mov	r0, r4
 647 001a FFF7FEFF 		bl	HAL_CAN_Start
 648              	.LVL24:
 131:Core/Src/main.c **** 
 649              		.loc 1 131 3 view .LVU179
 650 001e 0122     		movs	r2, #1
 651 0020 1021     		movs	r1, #16
 652 0022 1448     		ldr	r0, .L36+4
 653 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 654              	.LVL25:
 142:Core/Src/main.c ****   //配置CAN滤波器
 655              		.loc 1 142 3 view .LVU180
 656 0028 0021     		movs	r1, #0
 657 002a 2046     		mov	r0, r4
 658 002c FFF7FEFF 		bl	motor_RM3508_Init
 659              	.LVL26:
 154:Core/Src/main.c ****   {
 660              		.loc 1 154 3 view .LVU181
 157:Core/Src/main.c **** 	  {
 661              		.loc 1 157 4 view .LVU182
 157:Core/Src/main.c **** 	  {
 662              		.loc 1 157 9 is_stmt 0 view .LVU183
 663 0030 0BE0     		b	.L32
 664              	.L33:
 159:Core/Src/main.c **** 		  moter_rm3508_tx_massage(torque,0,0,0);
 665              		.loc 1 159 5 is_stmt 1 view .LVU184
 159:Core/Src/main.c **** 		  moter_rm3508_tx_massage(torque,0,0,0);
 666              		.loc 1 159 11 is_stmt 0 view .LVU185
 667 0032 3230     		adds	r0, r0, #50
 668 0034 80B2     		uxth	r0, r0
ARM GAS  /tmp/ccna5kiV.s 			page 38


 669 0036 104B     		ldr	r3, .L36+8
 670 0038 1880     		strh	r0, [r3]	@ movhi
 160:Core/Src/main.c **** 		  /*tx_data[0] = torque>>8;
 671              		.loc 1 160 5 is_stmt 1 view .LVU186
 672 003a 0023     		movs	r3, #0
 673 003c 1A46     		mov	r2, r3
 674 003e 1946     		mov	r1, r3
 675 0040 FFF7FEFF 		bl	moter_rm3508_tx_massage
 676              	.LVL27:
 165:Core/Src/main.c **** 	  }
 677              		.loc 1 165 5 view .LVU187
 678 0044 3220     		movs	r0, #50
 679 0046 FFF7FEFF 		bl	HAL_Delay
 680              	.LVL28:
 681              	.L32:
 157:Core/Src/main.c **** 	  {
 682              		.loc 1 157 16 view .LVU188
 683 004a 0B4B     		ldr	r3, .L36+8
 684 004c 1888     		ldrh	r0, [r3]
 685 004e B0F57A7F 		cmp	r0, #1000
 686 0052 EED3     		bcc	.L33
 687              	.L34:
 167:Core/Src/main.c **** 	  {
 688              		.loc 1 167 4 view .LVU189
 169:Core/Src/main.c **** 		  moter_rm3508_tx_massage(torque,0,0,0);
 689              		.loc 1 169 5 view .LVU190
 169:Core/Src/main.c **** 		  moter_rm3508_tx_massage(torque,0,0,0);
 690              		.loc 1 169 11 is_stmt 0 view .LVU191
 691 0054 084B     		ldr	r3, .L36+8
 692 0056 1888     		ldrh	r0, [r3]
 693 0058 3238     		subs	r0, r0, #50
 694 005a 80B2     		uxth	r0, r0
 695 005c 1880     		strh	r0, [r3]	@ movhi
 170:Core/Src/main.c **** 		  /*
 696              		.loc 1 170 5 is_stmt 1 view .LVU192
 697 005e 0023     		movs	r3, #0
 698 0060 1A46     		mov	r2, r3
 699 0062 1946     		mov	r1, r3
 700 0064 FFF7FEFF 		bl	moter_rm3508_tx_massage
 701              	.LVL29:
 176:Core/Src/main.c **** 	  }
 702              		.loc 1 176 5 discriminator 1 view .LVU193
 703 0068 3220     		movs	r0, #50
 704 006a FFF7FEFF 		bl	HAL_Delay
 705              	.LVL30:
 167:Core/Src/main.c **** 	  {
 706              		.loc 1 167 9 view .LVU194
 707 006e F1E7     		b	.L34
 708              	.L37:
 709              		.align	2
 710              	.L36:
 711 0070 00000000 		.word	hcan1
 712 0074 001C0240 		.word	1073880064
 713 0078 00000000 		.word	torque
 714              		.cfi_endproc
 715              	.LFE138:
 717              		.global	torque
ARM GAS  /tmp/ccna5kiV.s 			page 39


 718              		.section	.bss.torque,"aw",%nobits
 719              		.align	1
 722              	torque:
 723 0000 0000     		.space	2
 724              		.global	huart1
 725              		.section	.bss.huart1,"aw",%nobits
 726              		.align	2
 729              	huart1:
 730 0000 00000000 		.space	72
 730      00000000 
 730      00000000 
 730      00000000 
 730      00000000 
 731              		.global	hcan1
 732              		.section	.bss.hcan1,"aw",%nobits
 733              		.align	2
 736              	hcan1:
 737 0000 00000000 		.space	40
 737      00000000 
 737      00000000 
 737      00000000 
 737      00000000 
 738              		.text
 739              	.Letext0:
 740              		.file 3 "/usr/share/gcc-arm-none-eabi-14.2/arm-none-eabi/include/machine/_default_types.h"
 741              		.file 4 "/usr/share/gcc-arm-none-eabi-14.2/arm-none-eabi/include/sys/_stdint.h"
 742              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 743              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 744              		.file 7 "/usr/share/gcc-arm-none-eabi-14.2/lib/gcc/arm-none-eabi/14.2.1/include/stddef.h"
 745              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 746              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 747              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 748              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 749              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 750              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 751              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 752              		.file 15 "Core/Inc/MotorRM3508Drive.h"
 753              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 754              		.file 17 "/usr/share/gcc-arm-none-eabi-14.2/arm-none-eabi/include/string.h"
 755              		.file 18 "/usr/share/gcc-arm-none-eabi-14.2/arm-none-eabi/include/stdio.h"
 756              		.file 19 "<built-in>"
ARM GAS  /tmp/ccna5kiV.s 			page 40


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccna5kiV.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccna5kiV.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccna5kiV.s:177    .text.MX_GPIO_Init:000000ac $d
     /tmp/ccna5kiV.s:184    .rodata.motor_rm3508_MSgPendingCallback.str1.4:00000000 $d
     /tmp/ccna5kiV.s:188    .text.motor_rm3508_MSgPendingCallback:00000000 $t
     /tmp/ccna5kiV.s:194    .text.motor_rm3508_MSgPendingCallback:00000000 motor_rm3508_MSgPendingCallback
     /tmp/ccna5kiV.s:260    .text.motor_rm3508_MSgPendingCallback:00000048 $d
     /tmp/ccna5kiV.s:729    .bss.huart1:00000000 huart1
     /tmp/ccna5kiV.s:266    .text.Error_Handler:00000000 $t
     /tmp/ccna5kiV.s:272    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccna5kiV.s:304    .text.MX_CAN1_Init:00000000 $t
     /tmp/ccna5kiV.s:309    .text.MX_CAN1_Init:00000000 MX_CAN1_Init
     /tmp/ccna5kiV.s:377    .text.MX_CAN1_Init:00000038 $d
     /tmp/ccna5kiV.s:736    .bss.hcan1:00000000 hcan1
     /tmp/ccna5kiV.s:383    .text.MX_USART1_UART_Init:00000000 $t
     /tmp/ccna5kiV.s:388    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
     /tmp/ccna5kiV.s:443    .text.MX_USART1_UART_Init:0000002c $d
     /tmp/ccna5kiV.s:449    .text.SystemClock_Config:00000000 $t
     /tmp/ccna5kiV.s:455    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccna5kiV.s:605    .text.SystemClock_Config:000000a0 $d
     /tmp/ccna5kiV.s:611    .text.main:00000000 $t
     /tmp/ccna5kiV.s:617    .text.main:00000000 main
     /tmp/ccna5kiV.s:711    .text.main:00000070 $d
     /tmp/ccna5kiV.s:722    .bss.torque:00000000 torque
     /tmp/ccna5kiV.s:719    .bss.torque:00000000 $d
     /tmp/ccna5kiV.s:726    .bss.huart1:00000000 $d
     /tmp/ccna5kiV.s:733    .bss.hcan1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_f2d
sprintf
strlen
HAL_UART_Transmit
HAL_CAN_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_Start
motor_RM3508_Init
moter_rm3508_tx_massage
HAL_Delay
